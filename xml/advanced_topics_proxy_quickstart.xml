<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml" 
                 title="Profiling step"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
         xml:id="advanced.topics.proxy.quickstart">
 <title>&susemgr; &productnumber; Proxy</title>
 <info>
  <abstract>
   <para>
    This chapter explains how to install and set up &susemgr; &productnumber;
    Proxy. It also provides notes about migrating a previous proxy such as
    version 2.1 or 3.0 to version 3.1.
   </para>
  </abstract>
 </info>
 <sect1 xml:id="at.manager.proxy.concepts">
  <title>Overview</title>

  <para>
   &susemgr; &productnumber; Proxy is a &susemgr; add-on that caches software
   packages on an internal, central server. The proxy caches patch updates from
   &suse; or custom RPMs generated by third-party organizations. A proxy allows
   you to use bandwidth more effectively because client systems connect to the
   proxy for updates, and the &susemgr; server is no longer required to handle
   all client requests. The proxy also supports transparent custom package
   deployment.
  </para>

  <para>
   &susemgr; Proxy is an open source (GPLv2) solution that provides the
   following features:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Cache software packages within a Squid proxy.
    </para>
   </listitem>
   <listitem>
    <para>
     Client systems see the &susemgrproxy; as a &susemgr; server instance.
    </para>
   </listitem>
   <listitem>
    <para>
     The &susemgrproxy; is registered as a client system with the &susemgr;
     server.
    </para>
   </listitem>
  </itemizedlist>

  <para>
   The primary goal of a &susemgrproxy; is to improve &susemgr; performance by
   reducing bandwidth requirements and accelerating response time.
  </para>

  <note>
   <title>Version Information</title>
   <para>
    SLE 12 SP4 became available in December 2018. &suse; recommends that you
    use this as the base system for installation, or as your migration target.
   </para>
  </note>
 </sect1>
 <sect1 xml:id="at.manager.proxy.inst_and_clients">
  <title>Proxy Installation and Connecting Clients</title>
  <sect2 xml:id="at.manager.proxy.requirements">
  <title>Requirements</title>

  <para>
   The following section provides &susemgr; &productnumber; Proxy requirements.
  </para>

  <formalpara>
   <title>Supported Client Systems</title>
   <para>
    For supported clients and their requirements, see
    <xref
      linkend="mgr.supported.client.systems"/>.
   </para>
  </formalpara>

  <formalpara>
   <title>Hardware Requirements</title>
   <para>
    Hardware requirements highly depend on your usage scenario. When planning
    proxy environments, consider the amount of data you want to cache on your
    proxy. If your proxy should be a 1:1 mirror of your &susemgr;, the same
    amount of disk space is required. For specific hardware requirements, see
    the following table.
   </para>
  </formalpara>

  <informaltable>
   <tgroup cols="2">
    <colspec colname="c1" colwidth="1*"/>
    <colspec colname="c2" colwidth="4*"/>
    <thead>
     <row>
      <entry>
       <para>
        Hardware
       </para>
      </entry>
      <entry>
       <para>
        Required
       </para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para>
        CPU
       </para>
      </entry>
      <entry>
       <para>
        Multi-core 64-bit CPU (x86_64).
        <remark>We need to test number of
                cores</remark>
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        RAM
       </para>
      </entry>
      <entry>
       <remark>Check to ensure these are the correct memory requirements with team</remark>
       <para>
        Minimum 4&nbsp;GB for a non-production server
       </para>
       <para>
        Minimum 16&nbsp;GB for a production server
       </para>
      </entry>
     </row>
     <row>
      <entry>
       <para>
        Free Disk Space
       </para>
      </entry>
      <entry>
       <para>
        Minimum 100&nbsp;GB for base installation and at least 50 GB for
        caching per SUSE product and +100 GB per Red Hat product; a resizeable
        partition strongly recommended.
       </para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>

  <tip>
   <title>Storage for Proxy Data</title>
   <para>
    &suse; recommends storing the squid proxy caching data on a separate disk
    formatted with the XFS file system.
   </para>
  </tip>

  <formalpara>
   <title>SSL Certificate Password</title>
   <para>
    For installing the proxy, you need the SSL certificate password
    entered during the initial installation of &susemgr;.
   </para>
  </formalpara>

  <formalpara>
   <title>Network Requirements</title>
   <para>
    For additional network requirements, see
    <xref
      linkend="mgr.additional.requirements"/>.
   </para>
  </formalpara>

  <formalpara>
   <title>&scc;</title>
   <para>
    For using &susemgr; &productnumber; Proxy, you need an account at &scc;
    (SCC) where your purchased products and product subscriptions are
    registered. Make sure you have the following subscriptions:
   </para>
  </formalpara>

  <itemizedlist>
   <listitem>
    <para>
     One or more subscriptions for &susemgrproxy;.
    </para>
   </listitem>
   <listitem>
    <para>
     One or more subscriptions for &susemgr;.
    </para>
   </listitem>
   <listitem>
    <para>
     Subscriptions for the products on the client systems you want to register
     with &susemgr; via &susemgrproxy;.
    </para>
   </listitem>
   <listitem>
    <para>
     Subscriptions to client entitlements for the client system you want to
     register with &susemgr; via &susemgrproxy;.
    </para>
   </listitem>
  </itemizedlist>

  <formalpara>
   <title>Network Time Protocol (NTP)</title>
   <para>
    The connection to the Web server via Secure Sockets Layer (SSL) requires
    correct time settings on the server, proxy and clients. For this reason,
    all systems must use NTP. For more information, see
    <link
       xlink:href="https://www.suse.com/documentation/sles-12/book_sle_admin/data/cha_netz_xntp.html"
       />.
   </para>
  </formalpara>

  <formalpara>
   <title>Virtual Environments</title>
   <para>
    The following virtual environments are supported:
   </para>
  </formalpara>

  <itemizedlist>
   <listitem>
    <para>
     <link xlink:href="http://www.linux-kvm.org/page/Main_Page"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <link xlink:href="http://www.vmware.com/"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <link
        xlink:href="http://www.microsoft.com/en-us/server-cloud/solutions/virtualization.aspx"
        />
    </para>
   </listitem>
  </itemizedlist>

  <para>
   For running &susemgrproxy; in virtual environments, use the following
   settings for the virtual machine (VM):
  </para>

  <itemizedlist>
   <listitem>
    <para>
     At least 1 GB of RAM
    </para>
   </listitem>
   <listitem>
    <para>
     Bridged network
    </para>
   </listitem>
  </itemizedlist>
 </sect2>
 <sect2 xml:id="at.manager.proxy.inst">
  <title>Installation and Setup</title>

  <para>
   The following section will guide you through the installation and setup
   procedure.
  </para>

  <important>
   <title>Registering Proxies</title>
   <para>
    &susemgr; Proxy systems are registered as traditional clients using a
    bootstrap script. Currently there is no method to register proxy systems
    using Salt. A &susemgrproxy; can serve both Traditional and Salt clients.
   </para>
  </important>

  <procedure xml:id="at.manager.proxy.install.prep">
   <title>Registering the Proxy</title>

   <important>
    <para>
     First completly download the channels (&sle; 12 SP3) and then create the
     activation key. Only then you can select the correct child channels.
    </para>
   </important>
   
   <step>
    <para>
     Create an activation key based on the &sle; 12 SP3 base channel. For more
     information about activation keys, see
     <xref
        linkend="create.act.keys"/>.
    </para>
    <figure>
     <title>Proxy Activation Key</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="proxy-key.png" width="80%"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="proxy-key.png"/>
      </imageobject>
     </mediaobject>
    </figure>
   </step>
   <step>
    <para>
     Click the <guimenu>Child Channels</guimenu> subtab and select the
     &susemgr; 3.1 Proxy child channel with the matching update channel
     (<systemitem>SUSE Manager Proxy-3.1-Pool</systemitem> and
     <systemitem>SUSE-Manager-Proxy-3.1-Updates</systemitem>). These
     child channels are required for providing the proxy packages and
     updates.  As for normal SLES clients,
     <systemitem>SLES12-SP3-Updates</systemitem> plus
     <systemitem>SLE-Manager-Tools12-Pool</systemitem> and
     <systemitem>SLE-Manager-Tools12-Updates</systemitem> are required.
    </para>
    <figure>
     <title>Base and Child Proxy Channel</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="sles12-proxy-child.png" width="80%"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="sles12-proxy-child.png"/>
      </imageobject>
     </mediaobject>
    </figure>
   </step>
   <step xml:id="at.manager.proxy.install.prep.bss">
    <para>
     Modify a bootstrap script for the proxy. Ensure unchecking
     <guimenu>Bootstrap using Salt</guimenu>, because in this case the proxy
     must be bootstrapped as a so-called traditional client. For more
     information about bootstrap scripts, see
     <xref
        linkend="modify.bootstrap.script"/>.
    </para>
   </step>
   <step>
    <para>
     Bootstrap the client with the bootstrap script.
    </para>
   </step>
   <!-- according to MB, the following is now superfluous -->
   <!--
   <step>
    <para>
      Once you have registered your client, direct your browser to the
      &susemgr; &webui; and login.
    </para>
   </step>
   <step>
     <para>
       Select the <guimenu>Systems</guimenu> tab and click on your newly
       registered &sle; client system from the <guimenu>Systems
       Overview</guimenu> table.
     </para>
    </step>
    <step>
      <para>
        On the system's detail page select the <guimenu>Software</guimenu> tab,
        then <guimenu>Software Channels</guimenu> tab.
      </para>
    </step>
   -->
    <step>
      <para>
       You will see a list of channels to which your client is already
       subscribed to. Select the two unchecked proxy channels which include the
       <systemitem>SUSE Manager Proxy-3.1-Pool</systemitem> and
       <systemitem>SUSE-Manager-Proxy-3.1-Updates</systemitem>, then select
       <guimenu>Change Subscriptions</guimenu> to continue. This will provide
       the required repositories for the proxy packages from the &susemgr;
       server to the client.
      </para>
    </step>
  </procedure>

  <para>
   A few more steps are still needed:
  </para>
   <itemizedlist>
    <listitem>
     <para>
      install the <filename>suma_proxy</filename> pattern (see <xref
      linkend="at.manager.proxy.run.pattern"/>);
     </para>
    </listitem>
    <listitem>
     <para>
      copy the SSL certificate and key from the server (see <xref
      linkend="at.manager.proxy.run.copycert"/>);
     </para>
    </listitem>
    <listitem>
     <para>
      run <command>configure-proxy.sh</command> (see <xref
      linkend="at.manager.proxy.run.confproxy"/>);
     </para>
    </listitem>
   </itemizedlist>
   <para>
   You will then be able to register your clients against the proxy using
   the &webui; or a bootstrap script as if it were a &susemgr; server.
   For more information, see
   <xref linkend="at.manager.proxy.register.saltclients"/>.
  </para>
 </sect2>
 <sect2 xml:id="at.manager.proxy.run.pattern">
  <title>Install the <filename>suma_proxy</filename> pattern</title>

   <para>
     Make sure the <filename>suma_proxy</filename> pattern version 2.5.1.3 or
     later is installed using the following command on the proxy:
   </para>

<screen>&prompt.root;zypper in -t pattern suma_proxy</screen>

   <para>
     The new salt-broker service will be automatically started at the end of
     the package installation. This service forwards the Salt interactions
     to the SUSE Manager server.
   </para>

  <note>
    <title>Proxy Chains</title>
    <para>It is possible to arrange Salt proxies in a chain. In such a case,
      the upstream proxy is named <quote>parent</quote>.
    </para>
  </note>

  <para>Make sure the proxie's TCP ports <literal>4505</literal> and
    <literal>4506</literal> are open and that the proxy can reach the SUSE
    Manager server (or another upstream proxy) on these ports.
  </para>
 </sect2>
 <sect2 xml:id="at.manager.proxy.run.copycert">
  <title>Copy Server Certificate and Key</title>

  <para>
   The proxy will share some SSL information with the &susemgr; server,
   so the next step is to copy the certificate and its key from the
   &susemgr; server or the upstream proxy.
  </para>

  <para>
   As &rootuser;, enter the following commands
   on the proxy using your &susemgr; server or chained proxy named
   as <replaceable>PARENT</replaceable>:
  </para>

<screen>&prompt.root;cd /root/ssl-build
&prompt.root;scp root@<replaceable>PARENT</replaceable>:/root/ssl-build/RHN-ORG-PRIVATE-SSL-KEY .
&prompt.root;scp root@<replaceable>PARENT</replaceable>:/root/ssl-build/RHN-ORG-TRUSTED-SSL-CERT .
&prompt.root;scp root@<replaceable>PARENT</replaceable>:/root/ssl-build/rhn-ca-openssl.cnf .</screen>

  <note>
    <title>Known Limitation</title>
    <para>The SUSE Manager Proxy functionality is only supported
      if the same SSL certificate generated for SUSE Manager Server
      was used when setting up the Proxy. Using different certificates
      for Proxies and Server is at the moment not supported.
    </para>
   </note>
 </sect2>
 <sect2 xml:id="at.manager.proxy.run.confproxy">
  <title>Running <command>configure-proxy.sh</command></title>

  <para>
   The <command>configure-proxy.sh</command> script will finalize the
   setup of your &susemgrproxy;.
  </para>

  <para>
   Now execute the interactive <command>configure-proxy.sh</command>
   script.  Pressing <keycap>Enter</keycap> without further input will
   make the script use the default values provided between brackets
   <literal>[]</literal>. Here is some information about the requested
   settings:
  </para>

  <variablelist>
   <varlistentry>
    <term>SUSE Manager Parent</term>
    <listitem>
     <para>
      A &susemgr; parent can be either another proxy server or a &susemgr;
      server.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>HTTP Proxy</term>
    <listitem>
     <para>
      A HTTP proxy enables your &susemgr; proxy to access the Web.  This
      is needed if where direct access to the Web is prohibited by a
      firewall.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Proxy Version to Activate</term>
    <listitem>
     <para>
      Normally, the correct value (3.0 or 3.1) should be offered as a default.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Traceback Email</term>
    <listitem>
     <para>
      An email address where to report problems.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Use SSL</term>
    <listitem>
     <para>
      For safety reasons, press <literal>Y</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Do You Want to Import Existing Certificates?</term>
    <listitem>
     <para>
      Answer <literal>N</literal>.  This ensures using the new
      certificates that were copied previously from the &susemgr;
      server.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Organization</term>
    <listitem>
     <para>
      The next questions are about the characteristics to use for the SSL
      certificate of the proxy. The organization might be the same organization
      that was used on the server, unless of course your proxy is not in the
      same organization as your main server.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Organization Unit</term>
    <listitem>
     <para>
      The default value here is the proxy's hostname.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>City</term>
    <term>State</term>
    <term>Country code</term>
    <term>Email</term>
    <listitem>
     <para>
      Further information attached to the proxy's certificate. Beware the
      country code must be made of two upper case letters. For further
      information on country codes, refer to the online
      <link xlink:href="https://www.iso.org/obp/ui/#search">list of alpha-2
      codes</link>.
     </para>
     <tip>
      <title>Country Code</title>
      <para>
       As the country code enter the country code set during the SUSE
       Manager installation. For example, if your proxy is in US and
       your &susemgr; in DE, you must enter <literal>DE</literal> for
       the proxy.
      </para>
     </tip>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Cname Aliases (Separated by Space)</term>
    <listitem>
     <para>
      Use this if your proxy server can be accessed through various DNS CNAME
      aliases. Otherwise it can be left empty.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>CA Password</term>
    <listitem>
     <para>
      Enter the password that was used for the certificate of your &susemgr;
      server.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Do You Want to Use an Existing SSH Key for Proxying SSH-Push Salt Minions?</term>
    <listitem>
     <para>
      Use this option if you want to reuse a SSH key that was used for SSH-Push
      Salt minions on the server.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Create and Populate Configuration Channel rhn_proxy_config_1000010001?</term>
    <listitem>
     <para>
      Accept default <literal>Y</literal>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>SUSE Manager Username</term>
    <term>Password</term>
    <listitem>
     <para>
      Use same user name and password as on the &susemgr; server.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Activate advertising proxy via SLP?</term>
    <listitem>
     <para>
      SLP stands for Service Location Protocol.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   If parts are missing, such as CA key and public certificate, the
   script prints commands that you must execute to integrate the needed
   files. When the mandatory files are copied, re-run
   <command>configure-proxy.sh</command>. Also restart the script if a
   HTTP error was met during script execution.
  </para>

  <para>
   <command>configure-proxy.sh</command> activates services required by
   &susemgr; Proxy, such as <systemitem>squid</systemitem>,
   <systemitem>apache2</systemitem>, <systemitem>salt-broker</systemitem>, and
   <systemitem>jabberd</systemitem>.
  </para>

  <para>
   To check the status of the proxy system and its clients, click the proxy
   system's details page on the &webui;
   (<menuchoice><guimenu>Systems</guimenu><guimenu>Proxy</guimenu></menuchoice>,
   then the system name). <guimenu>Connection</guimenu> and
   <guimenu>Proxy</guimenu> subtabs display the respective status information.
  </para>
 </sect2>
 <sect2 xml:id="at.manager.proxy.register.saltclients">
  <title>Registering Salt Clients via &susemgrproxy;</title>

  <para>
    Proxy servers may now act as a broker and package cache for Salt minions.
    These minions can be registered with a bootstrap script like
    the traditional clients, or directly from the &webui; or the command line.
  </para>

  <para>
    Registering Salt clients via &susemgrproxy; from the &webui; is done almost
    the same way as registering clients directly with the &susemgr; server.
    The difference is that you specify the name of the proxy in the
    <guimenu>Proxy</guimenu> drop-box on
    <menuchoice><guimenu>Salt</guimenu><guimenu>Bootstrapping</guimenu></menuchoice>
    page.
  </para>

  <figure>
   <title>Bootstrapping a Salt Client With a Proxy</title>
   <mediaobject>
    <imageobject>
     <imagedata fileref="proxy-saltbootstrap.png" width="80%"/>
    </imageobject>
   </mediaobject>
  </figure>
   <procedure>
     <title>Register a Salt client through a proxy from command line</title>
     <step>
        <para>Instead of the &webui;, you may use the command line to register
          a minion through a proxy. To do so, add the proxy FQDN as the master
          in the minions configuration file located at:</para>
<screen>/etc/salt/minion</screen>
        <para>or alternatively:</para>
<screen>/etc/salt/minion.d/<replaceable>name</replaceable>.conf</screen>
     </step>
     <step>
        <para>Add the FQDN to the minion file:</para>
<screen>master: proxy123.example.com</screen>
        <para>Save and restart the salt-minion service with:</para>
<screen>&prompt.root;systemctl restart salt-minion</screen>
      </step>
      <step>
         <para>On the proxy, accept the new minion key with:</para>
<screen>&prompt.root;salt-key -a 'minion'</screen>
         <para>The minion will now connect to the proxy exclusively for Salt operations and
           normal HTTP package downloads.</para>
      </step>
    </procedure>

 </sect2>
 <sect2 xml:id="at.manager.proxy.register.clients">
  <title>Registering Clients via &susemgrproxy; with a Script</title>

  <para>
   Registering clients (either traditional or Salt) via &susemgrproxy; with a
   script is done almost the same way as registering clients directly with
   the &susemgr; server. The difference is that you create the bootstrap script
   on the &susemgrproxy; with a command-line
   tool. The bootstrap script then deploys all necessary information to the
   clients. The bootstrap script refers some parameters (such as activation
   keys or GPG keys) that depend on your specific setup.
  </para>

  <procedure>
   <step>
    <para>
     Create a client activation key on the &susemgr; server using the &webui;.
     See <xref linkend="create.act.keys"/>.
    </para>
   </step>
   <step>
    <para>
     On the proxy, execute the <command>mgr-bootstrap</command> command-line
     tool as &rootuser;.
     If needed, use the additional command-line switches to tune your
     bootstrap script. An important option is <command>--traditional</command>
     that enables to opt for a traditional client instead of a salt minion.
    </para>

    <para>
     To view available options type <command>mgr-bootstrap
     --help</command> from the command line:
    </para>
<screen><prompt># </prompt><command>mgr-bootstrap --activation-keys=<replaceable>key-string</replaceable></command></screen>
   </step>
   <step>
    <para>
     Optionally edit the resulting bootstrap script.
     Execute the bootstrap script on the clients as described in
     <xref linkend="connect.first.client"/>.
    </para>
   </step>
  </procedure>

  <para>
   The clients are registered with the &susemgrproxy; specified in the
   bootstrap script.
  </para>
 </sect2>
 <sect2>
   <title>Additional Information about Client Registration on Proxies</title>

   <para>Within the &webui;, standard proxy pages will show information
     about client, no matter whether minions or traditional clients. </para>

   <para>A list of clients connected to a proxy can be located under
     <guimenu>Systems</guimenu> &lt;proxy name&gt; <guimenu>Details</guimenu>
     <guimenu>Proxy</guimenu>. </para>

   <para>A list of chained proxies for a minion can be located under
     <guimenu>Systems</guimenu> &lt;minion name&gt; <guimenu>Details</guimenu>
     <guimenu>Connection</guimenu></para>

   <para>If you decide to move any of your clients between proxies or the
     server you will need to repeat the registration process from scratch.</para>
 </sect2>
 </sect1>
 <sect1 xml:id="advanced.topics.proxy.pxe">
  <title>Enabling PXE Boot via &susemgrproxy;</title>

  <sect2 xml:id="advanced.topics.proxy.pxe.sync">
   <title>Synchronizing Profiles and System Information</title>
   <para>
    To enable PXE boot via a proxy server, additional software must be
    installed and configured on both the &susemgr; server and the
    &susemgrproxy; server.
   </para>
   <procedure>
    <step>
     <para>
      On the &susemgr; server install
      <package>susemanager-tftpsync</package>
      :
     </para>
<screen><prompt># </prompt><command>zypper in susemanager-tftpsync</command></screen>
    </step>
    <step>
     <para>
      On the &susemgrproxy; server install
      <package>susemanager-tftpsync-recv</package>
      :
     </para>
<screen><prompt># </prompt><command>zypper in susemanager-tftpsync-recv</command></screen>
    </step>
    <step>
     <para>
      Run the <command>configure-tftpsync.sh</command> setup script and enter
      the requested information:
     </para>
<screen><prompt># </prompt><command>configure-tftpsync.sh</command></screen>
     <para>
      It asks for hostname and IP address of the &susemgr; server and of the
      proxy itself. Additionally, it asks for the tftpboot directory on the
      proxy.
     </para>
    </step>
    <step>
     <para>
      On the &susemgr; server, run <command>configure-tftpsync.sh</command> to
      configure the upload to the &susemgrproxy; server:
     </para>
<screen><prompt># </prompt><command>configure-tftpsync.sh <replaceable>FQDN_of_Proxy_Server</replaceable></command></screen>
    </step>
    <step>
     <para>
      To initiate an initial synchronization on the SUSE Manager Server run:
     </para>
<screen><prompt># </prompt><command>cobbler sync</command></screen>
     <para>
      Also can also be done after each a change within Cobbler that needs to be
      synchronized immediately. Otherwise Cobbler synchronization will also run
      automatically when needed. For more information about Cobbler, see
      <xref
       linkend="advanced.topics.cobbler"/>.
     </para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="advanced.topics.proxy.pxe.dhcp">
   <title>Configuring DHCP for PXE via &susemgrproxy;</title>
   <para>
    &susemgr; is using Cobbler to provide provisioning. PXE (tftp) is installed
    and activated by default. To enable systems to find the PXE boot on the
    &susemgrproxy; server add the following to the DHCP configuration for the
    zone containing the systems to be provisioned:
   </para>
<screen>next-server: <replaceable>IP_Address_of_SUSE_Manager_Proxy_Server</replaceable>
filename: "pxelinux.0"</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="advanced.topics.proxy.migration3">
  <title>Migrating &susemgr; 3 Proxy to Version 3.1</title>

  <para>
   The recommended order for migrations is to first migrate the server and then
   the proxies. Note that a &susemgr; 3 Proxy cooperates just fine with
   &susemgr; 3.1.
  </para>

  <para>
   For the migration of the proxies there are two possible approaches: Existing
   &susemgr; proxies may be upgraded to version 3.1 with &yast; or
   <command>zypper</command> migration. Alternatively, the proxies may be
   replaced by new ones. This section documents both approaches.
  </para>

  <note>
   <title>Version Information</title>
   <para>
    &susemgr; 3.1 and &susemgr; 3.1 Proxy were originally released as a
    SLES 12 SP2 extension.  With the next maintenance update (December 2018),
    both will be based on SLES 12 SP4 and support SLE 12 SP4 clients
    officially.  In the following sections and chapters, it is highly
    recommended to use SLE 12 SP4 instead of SP2 or SP3.
   </para>
  </note>

  <sect2>
   <title>Replacing a &susemgrproxy;</title>
   <para>
    A &susemgrproxy; is <literal>dumb</literal> in the sense that it does not
    contain any information about the clients which are connected to it. A
    &susemgrproxy; can therefore be replaced by a new one. Naturally, the
    replacement proxy must have the same name and IP address as its
    predecessor.
   </para>
   <para>
    In order to replace a &susemgrproxy; and keeping the clients
    registered to the proxy leave the old proxy in &susemgr;.  Create a
    reactivation key for this system and then register the new proxy
    using the reactivation key.  If you do not use the reactivation
    key, you will need to re-registered all the clients against the new
    proxy.
   </para>

  <procedure xml:id="proc.advanced.topics.proxy.migration3.replace">
    <title>Replacing a &susemgrproxy; and Keeping the Clients
    Registered</title>
    <step>
     <para>
      Before starting the actual migration procedure, save the data from
      the old proxy, if needed.  Consider copying important data to a
      central place that can also be accessed by the new server:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        Copy the scripts that are still needed.
       </para>
      </listitem>
      <listitem>
       <para>
        Copy the activation keys from the previous server. Of course, it
        is always better to re-create the keys.
       </para>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>
      Shutdown the server.
     </para>
    </step>

    <!--
    <step xml:id="step.at.proxy.migration3.replace.react">
     <para>
      In the &webui;, create a reactivation key for the old proxy
      system.  For more information, see <xref
      linkend="s5-sm-system-details-react"/>.
     </para>
     </step>

    In the SUSE Manager Server GUI select the new SUSE Manager Proxy Server and delete this system.
    In the SUSE Manager Server GUI select the previous SUSE Manager Proxy Server and select the tab "Reactivation".
    Click on "Generate New Key" and write down (or copy in clipboard) the new key.
    On the new SUSE Manager Proxy enter the following to re-register this system:

rhnreg_ks -\-activationkey=<re-activation key> -\-force

Now all clients behind the previous SUSE Manager Proxy Server can access
SUSE Manager Server again.

    -->
    <step>
     <para>
      Install a new &susemgr; 3.1 Proxy, see <xref
      linkend="at.manager.proxy.inst_and_clients"/>.
     </para>
    </step>

    <step>
     <para>
      In the SUSE Manager &webui; select the newly installed
      &susemgrproxy; and delete it from the systems list.
     </para>
    </step>
    
    <step xml:id="step.at.proxy.migration3.replace.react">
     <para>
      In the &webui;, create a reactivation key for the old proxy
      system: On the System Details of the old proxy click
      <guimenu>Reactivation</guimenu>.  Then click <guimenu>Generate New
      Key</guimenu>, and remember it (write it on a piece of paper or
      copy it to the clipboard).  For more information about
      reactivation keys, see <xref
      linkend="s5-sm-system-details-react"/>.
     </para>
    </step>
    <!--
    <step>
     <para>
      To replace a &susemgrproxy;, delete the system from the &susemgr;
      <guimenu>Systems</guimenu> list. For more information, see
      <xref linkend="s3-sm-system-details"/>.
     </para>
     </step>
    -->
    <!--
    <step>
     <para>
      Shutdown the proxy and install the latest version, see
      <xref linkend="at.manager.proxy.inst"/>.
     </para>
     </step>
    -->
    <!--
    <step>
     <para>
      Complete the registration steps described in
      <xref
          linkend="at.manager.proxy.install.prep"/>,
      <xref
          linkend="at.manager.proxy.install.prep.bss"/>. Once you
      have completed registering the new proxy with the server, utilizing the
      appropriate channels, and finally having run the
      <command>configure-proxy.sh</command> script, all clients formally
      connected via the older proxy will continue operating as before.
     </para>
     </step>
    -->
    <step>
    <para>
     After the installation of the new proxy, perform the following actions (if needed):
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Copy the centrally saved data to the new proxy system.
      </para>
     </listitem>
    <listitem>
      <para>
       Install any other needed software.
      </para>
    </listitem>
    <listitem>
      <para>
       If the proxy is also used for autoinstallation, do not forget to
       setup TFTP synchronization.
      </para>
    </listitem>
    </itemizedlist>
    </step>
  </procedure>

   <important>
    <title>Proxy Installation and Client Connections</title>
    <para>
     During the installation of the proxy, clients will not be able to reach
     the &susemgr; server. After a &susemgrproxy; system has been deleted from
     the systems list, all clients connected to this proxy will be
     (incorrectly) listed as <literal>directly connected</literal> to the
     &susemgr; server. After the first successful operation on a client
     <emphasis>such as execution of a remote command or installation of a
     package or patch</emphasis> this information will automatically be
     corrected. This may take a few hours.
    </para>
   </important>
  </sect2>

  <sect2>
   <title>Upgrading a &susemgrproxy; from 3 to 3.1</title>
   <para>
    In most situations upgrading the proxy will be your preferred
    solution as this retains all cached packages. Selecting this route
    saves time especially regarding proxies connected to &susemgr;
    server via low-bandwith links. This upgrade is similar to a standard
    client migration.

   </para>
   <warning>
    <title>Synchronizing Target Channels</title>
    <para>
     Before successfully initializing the product migration, you first must
     make sure that the migration target channels are completely mirrored. For
     the upgrade to &susemgr; 3.1 Proxy, at least the <systemitem>SUSE Linux
     Enterprise Server 12 SP3</systemitem> base channel with the
     <systemitem>SUSE Manager Proxy 3.1</systemitem> child channel for your
     architecture is required.
    </para>
   </warning>
   <procedure>
    <title>Migrating Proxy to 3.1</title>
    <step>
     <para>
      Direct your browser to the &susemgr; &webui; where your proxy is
      registered, and login.
     </para>
    </step>
    <step>
     <para>
      On the
      <menuchoice><guimenu>Systems</guimenu><guimenu>Systems</guimenu><guimenu>Proxy</guimenu></menuchoice>
      page select your proxy client system from the table.
     </para>
     <figure xml:id="fig-proxy-old-details">
      <title>&susemgr; Proxy Details Page</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="suma_proxy_old_details_page.png" width="80%"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="suma_proxy_old_details_page.png"/>
       </imageobject>
      </mediaobject>
     </figure>
    </step>
    <step>
     <para>
      On the system's detail page
      (<xref
       linkend="fig-proxy-old-details"/>) select the
      <guimenu>Software</guimenu> tab, then the <guimenu>SP Migration</guimenu>
      tab (<xref linkend="fig-proxy-old-spmigr"/>).
     </para>
     <figure xml:id="fig-proxy-old-spmigr">
      <title>SP Migration Page</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="suma_proxy_old_details_spmigration.png" width="80%"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="suma_proxy_old_details_spmigration.png"/>
       </imageobject>
      </mediaobject>
     </figure>
    </step>
    <step>
     <para>
      On <xref linkend="fig-proxy-old-spmigr"/> you will see the installed
      products listed on your proxy client, and the available target products.
      Select the wanted <guimenu>Target Products</guimenu>, which include
      <systemitem>&sls; 12 SP3</systemitem> and <systemitem>SUSE Manager
      Proxy 3.1</systemitem>.
     </para>
     <figure xml:id="fig-proxy-migration-target">
      <title>SP Migration Target</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="suma_proxy_migration_target.png" width="80%"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="suma_proxy_migration_target.png"/>
       </imageobject>
      </mediaobject>
     </figure>
     <para>
      Then confirm with <guimenu>Select Channels</guimenu>.
     </para>
     <figure xml:id="fig-proxy-migration-channels">
      <title>SP Migration Channels</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="suma_proxy_migration_channels.png" width="80%"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="suma_proxy_migration_channels.png"/>
       </imageobject>
      </mediaobject>
     </figure>
    </step>
    <step>
     <para>
      On <xref linkend="fig-proxy-migration-channels"/>, <guimenu>Schedule
      Migration</guimenu>, and then <guimenu>Confirm</guimenu>.
     </para>
    </step>
   </procedure>
<!-- <result> -->
   <para>
    Check the <guimenu>System Status</guimenu> on the system's details when the
    migration is done.
   </para>
   <figure xml:id="fig-proxy-migrated">
    <title>Migrated &susemgrproxy; System</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="suma_proxy_migrated.png" width="80%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="suma_proxy_migrated.png"/>
     </imageobject>
    </mediaobject>
   </figure>
   <!-- </result> -->

   <note>
    <!-- https://bugzilla.suse.com/show_bug.cgi?id=1074297#c9 -->
    <title>Checking <literal>refresh_pattern</literal> in <filename>/etc/squid/squid.conf</filename></title>
    <para>
     If you migrate from an early &susemgrproxy; 3.0 add the
     following <literal>refresh_pattern</literal> to
     <filename>/etc/squid/squid.conf</filename>:
    </para>

<screen># salt minions get the repodata via a different URL
refresh_pattern /rhn/manager/download/.*/repodata/.*$ 0 1% 1440 ignore-no-cache reload-into-ims refresh-ims</screen>

   </note>
   <para>
    Finally consider to schedule a reboot.
   </para>
  </sect2>
 </sect1>
 <sect1 xml:id="advanced.topics.proxy.migration">
  <title>Migrating &susemgr; 2.1 Proxy to Version 3.1</title>

  <para>
   For the migration of &susemgr; 2.1 Proxies there are two possible
   approaches—this section documents both approaches:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     Existing &susemgr; proxies may be replaced by newly installed and
     reconfigured proxies, see <xref
     linkend="advanced.topics.proxy.migration.replace"/>. This is the
     recommended method.
    </para>
   </listitem>
   <listitem>
    <para>
     Proxies may be auto-upgraded to version 3.1 by means of &yast;
     auto-installation, see <xref
     linkend="advanced.topics.proxy.migration.upgrade"/>.
    </para>
   </listitem>
  </itemizedlist>

  <tip>
   <title>Order of Server and Proxy Migration</title>
   <para>
    The recommended order for migrations is to first migrate the server
    and then the proxies. A &susemgr; 2.1 Proxy cooperates just fine
    with &susemgr; 3.1.
   </para>
  </tip>

  <sect2 xml:id="advanced.topics.proxy.migration.replace">
   <title>Replacing a &susemgrproxy;</title>
   <para>
    A &susemgrproxy; is <literal>dumb</literal> in the sense that it does not
    contain any information about the clients which are connected to it. A
    &susemgrproxy; can therefore be replaced by a new one. The replacement
    proxy must have the same name and IP address as its predecessor.
   </para>

   <para>
    In order to replace a &susemgrproxy; and keeping the clients
    registered to the proxy leave the old proxy in &susemgr;.  Create a
    reactivation key for this system and then register the new proxy
    using the reactivation key.  If you do not use the reactivation
    key, you will need to re-registered all the clients against the new
    proxy.
   </para>
   
  <procedure xml:id="proc.advanced.topics.proxy.migration21.replace">
    <title>Replacing a &susemgrproxy; and Keeping the Clients
    Registered</title>
    <step>
     <para>
      Before starting the actual migration procedure, save the important
      data from the old proxy.  Copy the data to a central place that
      also the new server can access:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        Copy the scripts that are still needed.
       </para>
      </listitem>
      <listitem>
       <para>
        Copy the activation keys from the existing server. Of course, it
        is always better to re-create the keys.
       </para>
      </listitem>
     </itemizedlist>
    </step>
    <step>
     <para>
      Shutdown the server.
     </para>
    </step>

    <!--
    <step xml:id="step.at.proxy.migration.replace.react">
     <para>
      In the &webui;, create a reactivation key for the old proxy
      system.  For more information, see <xref
      linkend="s5-sm-system-details-react"/>.
     </para>
     </step>

    In the SUSE Manager Server GUI select the new SUSE Manager Proxy Server and delete this system.
    In the SUSE Manager Server GUI select the previous SUSE Manager Proxy Server and select the tab "Reactivation".
    Click on "Generate New Key" and write down (or copy in clipboard) the new key.
    On the new SUSE Manager Proxy enter the following to re-register this system:

rhnreg_ks -\-activationkey=<re-activation key> -\-force

Now all clients behind the previous SUSE Manager Proxy Server can access
SUSE Manager Server again.

    -->
    <step>
     <para>
      Install a new &susemgr; 3.1 Proxy, see <xref
      linkend="at.manager.proxy.inst_and_clients"/>.
     </para>
     <important>
      <title>Proxy Installation and Client Connections</title>
      <para>
       During the installation of the proxy, clients will not be able to
       reach the &susemgr; server. After a &susemgrproxy; system has
       been deleted from the systems list, all clients connected to this
       proxy will be (incorrectly) listed as <literal>directly
       connected</literal> to the &susemgr; server. After the first
       successful operation on a client <emphasis>such as execution of a
       remote command or installation of a package or patch</emphasis>
       this information will automatically be corrected. This may take a
       few hours.
      </para>
     </important>
    </step>

    <step>
     <para>
      In the SUSE Manager &webui; select the newly installed
      &susemgrproxy; and delete it from the systems list.
     </para>
    </step>
    
    <step xml:id="step.at.proxy.migration.replace.react">
     <para>
      In the &webui;, create a reactivation key for the old proxy
      system: On the System Details of the old proxy click
      <guimenu>Reactivation</guimenu>.  Then click <guimenu>Generate New
      Key</guimenu>, and remember it (write it on a piece of paper or
      copy it to the clipboard).  For more information about
      reactivation keys, see <xref
      linkend="s5-sm-system-details-react"/>.
     </para>
    </step>
    <!--
    <step>
     <para>
      To replace a &susemgrproxy;, delete the system from the &susemgr;
      <guimenu>Systems</guimenu> list. For more information, see
      <xref linkend="s3-sm-system-details"/>.
     </para>
     </step>
    -->
    <!--
    <step>
     <para>
      Shutdown the proxy and install the latest version, see
      <xref linkend="at.manager.proxy.inst"/>.
     </para>
     </step>
    -->
    <!--
    <step>
     <para>
      Complete the registration steps described in
      <xref
          linkend="at.manager.proxy.install.prep"/>,
      <xref
          linkend="at.manager.proxy.install.prep.bss"/>. Once you
      have completed registering the new proxy with the server, utilizing the
      appropriate channels, and finally having run the
      <command>configure-proxy.sh</command> script, all clients formally
      connected via the older proxy will continue operating as before.
     </para>
     </step>
    -->
    <step>
    <para>
     After the installation of the new proxy, perform the following actions (if needed):
    </para>
    <itemizedlist>
     <listitem>
      <para>
       Copy the centrally saved data back to the new proxy system.
      </para>
     </listitem>
    <listitem>
      <para>
       Install any other needed software.
      </para>
    </listitem>
    <listitem>
      <para>
       If the proxy is also used for autoinstallation, do not forget to
       setup TFTP synchronization.
      </para>
    </listitem>
    </itemizedlist>
    </step>
  </procedure>
  </sect2>

  <sect2 xml:id="advanced.topics.proxy.migration.upgrade">
   <title>Upgrading a &susemgrproxy; from 2.1 to 3.1</title>
   <para>
    In other situations upgrading the proxy will be the preferred
    solution as it retains all cached packages. This route saves time
    especially regarding proxies connected to a &susemgr;
    server via low-bandwith links. This upgrade can be automated by
    using the &yast; auto-installation feature.
   </para>
   <procedure>
    <title>Upgrading &susemgrproxy; from 2.1 to 3.1</title>
    <step>
     <para>
      Create an auto-installable distribution based on SLES 12 SP3.
      &susemgr; 3.1 Proxy is an Add-On for SLES 12 SP3.  Refer to the
      <xref linkend="ref.webui.systems.autoinst"/> on creating an
      auto-installable distribution.
     </para>
    </step>
    <step>
     <para>
      To start the auto-installation of a proxy, some additional
      packages must be installed that are only available in the
      &susemgr; Tools channel.  These tools were not available for
      proxies when in the past the system was shipped as an
      appliance. To gain access to the required packages for use with
      proxies, the underlying SLES 11 SP3 channel
      (<systemitem>SLES11-SP3-SUSE-Manager-Tools</systemitem>) needs to
      be cloned and assigned to the to-be-upgraded proxies. After these
      steps have been completed, create an auto-installation profile.
     </para>
    </step>
   </procedure>
   <para>
    In the following example you will see an auto-install profile. The label
    <literal>Proxy31</literal> is used both for the auto-installable
    distribution as well as for the auto-install profile. Use the following
    auto-installation as template and create the auto-installation profile by
    uploading the edited file:
   </para>
<!-- Where possible, avoid lines too long!
           PDFs have fixed widths! -->
<screen><![CDATA[<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns"
         xmlns:config="http://www.suse.com/1.0/configns">
  <general>
  $SNIPPET('spacewalk/sles_no_signature_checks')
    <mode>
      <confirm config:type="boolean">false</confirm>
    </mode>
  </general>
  <add-on>
    <add_on_products config:type="list">
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        <media_url>http://$redhat_management_server/ks/dist/child/sles12-sp3-updates-x86_64/Proxy31</media_url>
        <name>SLES12 SP3 Updates</name>
        <product>SLES12-SP3</product>
        <product_dir>/</product_dir>
      </listentry>
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        <media_url>http://$redhat_management_server/ks/dist/child/sle-manager-tools12-pool-x86_64-sp3/Proxy31</media_url>
        <name>SLE12 Manager Tools Pool</name>
        <product>SLES12</product>
        <product_dir>/</product_dir>
      </listentry>
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        <media_url>http://$redhat_management_server/ks/dist/child/sle-manager-tools12-updates-x86_64-sp3/Proxy31</media_url>
        <name>SLE12 Manager Tools Updates</name>
        <product>SLES12</product>
        <product_dir>/</product_dir>
      </listentry>
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        <media_url>http://$redhat_management_server/ks/dist/child/suse-manager-proxy-3.1-pool-x86_64/Proxy31</media_url>
        <name>SLE12 Proxy 3.1 Pool</name>
        <product>SLES12</product>
        <product_dir>/</product_dir>
      </listentry>
      <listentry>
        <ask_on_error config:type="boolean">true</ask_on_error>
        <media_url>http://$redhat_management_server/ks/dist/child/suse-manager-proxy-3.1-updates-x86_64/Proxy31</media_url>
        <name>SLE12 Proxy 3.1 Update</name>
        <product>SLES12</product>
        <product_dir>/</product_dir>
      </listentry>
    </add_on_products>
  </add-on>
  <upgrade>
    <only_installed_packages config:type="boolean">false</only_installed_packages>
    <stop_on_solver_conflict config:type="boolean">true</stop_on_solver_conflict>
  </upgrade>
  <backup>
    <sysconfig config:type="boolean">true</sysconfig>
    <modified config:type="boolean">true</modified>
    <remove_old config:type="boolean">false</remove_old>
  </backup>
  <networking>
    <keep_install_network config:type="boolean">true</keep_install_network>
    <start_immediately config:type="boolean">true</start_immediately>
  </networking>
  <scripts>
    <pre-scripts config:type="list">
      <script>
        <filename>remove_initrd_koan.sh</filename>
        <source>

        mount /dev/sda1 /mnt
        rm -f /mnt/initrd_koan
        umount /mnt

        </source>
      </script>
    </pre-scripts>
    <chroot-scripts config:type="list">
      <script>
        <filename>migration_fix_script.sh</filename>
        <chrooted config:type="boolean">true</chrooted>
        <source>]]>
&lt;![CDATA[ ln -sf /usr/share/rhn/RHN-ORG-TRUSTED-SSL-CERT /etc/pki/trust/anchors/
/usr/sbin/update-ca-certificates ]]&gt;<![CDATA[
        </source>
      </script>
    </chroot-scripts>
    <init-scripts config:type="list">
      <script>
        <filename>sles_register.sh</filename>
        <source>

         $SNIPPET('spacewalk/sles_register')
         chmod 640 /etc/sysconfig/rhn/systemid
         chown root:www /etc/sysconfig/rhn/systemid
         systemctl enable squid
         systemctl start squid

        </source>
      </script>
    </init-scripts>
  </scripts>
</profile>]]></screen>
   <para>
    Ensure all channels referenced in this file are available and fully synced.
    Replace the label <literal>Proxy31</literal> with the correct reference
    chosen for your auto-installation profile. It is recommended to create a
    new activation key, for example: <literal>1-sles12sp3</literal> which has
    the relevant channels assigned; later this key will be used to subscribe
    the upgraded proxy with the correct channels. The following base channel
    should be assigned:
   </para>
<screen>SLES12-SP3-Pool</screen>
   <para>
    Also include the following child channels:
   </para>
<screen>SLE-Manager-Tools12-Pool
SLE-Manager-Tools12-Updates
SLES12-SP3-Updates
SUSE-Manager-Proxy-3.1-Pool
SUSE-Manager-Proxy-3.1-Updates</screen>
   <para>
    In <literal>Kernel Options</literal> enter the following value:
   </para>
<screen>autoupgrade=1 Y2DEBUG=1</screen>
   <para>
    The debug setting is not required but can help investigate problems in case
    something goes wrong; the <parameter class="option">autoupgrade</parameter>
    parameter is vital! Do not remove it.
   </para>
   <para>
    Save your changes then click on "Variables" and enter the following value:
   </para>
<screen>registration_key=1-sles12sp3</screen>
   <para>
    Specify the name of the key which has all respective channels assigned to
    it. The auto-install file contains a script named
    <command>remove_initrd_koan.sh</command>. In this script you should specify
    the device name of your <filename>/boot</filename> partition.
   </para>
   <note>
    <title>remove_initrd_koan.sh</title>
    <para>
     The purpose of this script is to act as a workaround for the following
     problem: During installation the initrd of the installation media
     (SLES12SP3) is in use. This initrd is rather large (around 50 MB), so
     there is not enough space left when the new kernel is being installed.
     Therefore this script deletes the initial ramdisk file once it has been
     booted. The partition of your boot partition might differ, so it should be
     explicitly specified in the autoinstall file.
    </para>
   </note>
   <para>
    During auto-installation this script attempts to delete the initial ramdisk
    file once it has booted. Your boot partition may differ, so ensure it is
    explicitly specified within the auto-install file.
   </para>
   <para>
    If this step is bypassed or mixed up (for example: specifying a wrong
    value) it's fine. During installation of the new kernel, &yast; will detect
    that there is not enough space available and will stop. You may switch to
    another console (there is a shell running on virtual console 2) and reclaim
    some disk space by issuing the command:
   </para>
<screen>rm /mnt/boot/initrd_koan</screen>
   <para>
    When you have completed this step, switch back to the console where &yast;
    is running (console 7) and click <guimenu>Retry</guimenu>. Installation of
    the kernel will continue and succeed. The system will reboot, a few
    automated init scripts will run and the proxy will be upgraded to the
    &susemgr; 3.1 based on SLES12SP3 and will be fully functional.
   </para>
  </sect2>
 </sect1>
</chapter>
