<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter
[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
 xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="preparing.and.registering.clients">
 <title>Registering Clients</title>
 <sect1>
  <title>Introduction</title>

  <para> All releases previous to and including &susemgr; 2.1 were implemented and shipped with a
   client management framework, which today is still fully supported. Since version 3, &susemgr;
   includes a complete Salt solution in addition to the <quote>traditional</quote> framework. Salt
   is an end-to-end data-center automation tool which may also be used outside the scope of
   &susemgr; to introduce reactive, real-time orchestration, and configuration management. Managed
   systems may coexist using both methods, allowing you to become comfortable using Salt while
   keeping existing deployments intact. </para>
 </sect1>
 <sect1 xml:id="create.act.keys">
  <title>Creating Activation Keys</title>

  <para>Activation keys are used with both traditional and Salt clients
  to ensure that your clients have the correct software entitlements,
  are connecting to the appropriate channels, and are subscribed to the
  relevant groups.  Each activation key is bound to an orgnization,
  which you can set when you create the key.</para>
  
  <para>This section contains information on how to create activation
  keys for both traditional and Salt clients, and provides some best
  practices for working with activation keys.</para>

  <procedure xml:id="create.activation.keys">
   <title>Creating Activation Keys</title>
   <step>
    <para> Log in to the &susemgr; &webui; as administrator. </para>
   </step>
   <step xml:id="create.activation.keys.ak">
    <para> Switch to <menuchoice>
      <guimenu>Systems</guimenu>
      <guimenu>Activation Keys</guimenu>
     </menuchoice>. </para>
   </step>
   <step>
    <para> Click the <guimenu>Create Key</guimenu> link at the upper right corner. </para>
    <informalfigure>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="systems_create_activation_key.png" width="444"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="systems_create_activation_key.png" width="80%"/>
      </imageobject>
     </mediaobject>
    </informalfigure>
   </step>
   <step>
    <para> Enter a <guimenu>Description</guimenu> to identify the generated activation key. </para>
   </step>
   <step>
    <para> Enter a human readable <guimenu>Key</guimenu> string value such as
      <literal>SLES12-SP3</literal> to represent the distribution and service pack associated with
     the key. </para>
    <warning>
     <title>Allowed Characters</title>
     <para>Do not use commas in the <guimenu>Key</guimenu> field for any
     &suse; products.  However, you <emphasis>must</emphasis> use commas
     for Red Hat Products. For more information, see <xref
     linkend="ref.webui.systems.activ-keys"/>.
      <!-- was: Activation
                    Keys and rhnreg_ks: Reference Guide -->
     </para>
    </warning>
   </step>
   <step>
    <para> Enter <literal>1</literal> in the <guimenu>Usage</guimenu> field. This allows one client
     to register using this key and uses one of your subscription entitlements. </para>
   </step>
   <step>
    <para> Select the &sle; 12 SP3 channel you added earlier from the <guimenu>Base
      Channels</guimenu> drop down. </para>
   </step>
   <step>
    <para> Leave the <guimenu>Contact Method</guimenu> at default. </para>
   </step>
   <step>
    <para> Leave <guimenu>Universal Default</guimenu> unchecked. Click <guimenu>Create Activation
      Key</guimenu> to finish creating the key for the first channel. </para>
   </step>
  </procedure>
  <para>When you create activation keys, keep these best practices in mind:</para>
  <itemizedlist>
   <listitem>
    <para>
     Avoid using the <systemitem>SUSE Manager Default</systemitem>
     parent channel.  This setting forces {productname} to choose a
     parent channel that best corresponds to the installed operating
     system, which can sometimes lead to unexpected behavior.  Instead,
     &suse; recommends you create activation keys specific to each
     distribution and architecture.
    </para>
   </listitem>
   <listitem>
    <para>
     If you are using bootstrap scripts, consider creating an activation
     key for each script.  This will help you align channel assignments,
     package installation, system group memberships, and configuration
     channel assignments.  You will also need less manual interaction
     with your system after registration.
    </para>
   </listitem>
   <listitem>
    <para>
     If you do not enter a human-readable name for your activation keys,
     the system will automatically generate a number string, which can
     make it difficult to manage your keys.  Consider a naming scheme
     for your activation keys to help you keep track of them.
    </para>
   </listitem>
   <listitem>
    <para>
     Note that the <guimenu>Configuration File Deployment</guimenu>
     check box does not appear until after you have created the
     activation key.  Ensure you go back and check the box if you need
     to enable configuration management.
    </para>
   </listitem>
  </itemizedlist>
  
</sect1>
 <sect1 xml:id="create.tools.repository">
  <title>Creating the &susemgr; Tools Repository</title>

  <para> In this section you will create a tools repository on the &susemgr; Server for providing
   client tools. The client tools repository contains packages for installing Salt on minions as
   well as the required packages for registering traditional clients during the bootstrapping
   procedure. These packages will be installed from the newly generated repository during the
   registration process. In the following procedure you will create the &sle; 12 SP3 tools
   repository. </para>

  <important>
   <title>Creating a Tools Repository when an SCC Channel has not been Synced</title>
   <para> Before following the procedure to create the tools repository make sure the &suse; vendor
    channel you will be using with your client has been completely synced. You can check this by
    running <command>tail -f
     /var/log/rhn/reposync/<replaceable>CHANNEL_NAME</replaceable>.log</command> as &rootuser;. For
    example: </para>
   <screen><prompt># </prompt>tail -f /var/log/rhn/reposync/sles12-sp3-pool-x86_64.log</screen>
   <para> When finished you will see: </para>
   <screen>2017/12/12 15:20:32 +02:00 Importing packages started.
2017/12/12 15:22:02 +02:00 1.07 %
...
2017/12/12 15:34:25 +02:00 86.01 %
2017/12/12 15:35:49 +02:00 Importing packages finished.
2017/12/12 15:35:49 +02:00 Linking packages to channel.
...
2017/12/12 15:35:59 +02:00 Sync completed.</screen>
  </important>

  <procedure>
   <title>Generating the Tools Repository for &sle; 12 SP3</title>
   <step>
    <para> Open a terminal on the server as &rootuser; and enter the following command to list
     available bootstrap repositories: </para>
    <screen><prompt># </prompt><command>mgr-create-bootstrap-repo -l</command>
1. SLE-12-SP3-x86_64</screen>
   </step>
   <step>
    <para> Then invoke the same command using the listed repository as the product label to actually
     create the bootstrap repository: </para>
    <screen><prompt># </prompt><command>mgr-create-bootstrap-repo -c SLE-12-SP3-x86_64</command></screen>
   </step>
   <step>
    <para> &susemgr; will create and add the client tools to the newly created
      <replaceable>repositories</replaceable> directory located at
       <filename>/srv/www/htdocs/pub/<replaceable>repositories/</replaceable></filename>. </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="registering.clients.traditional">
  <title>Registering <quote>Traditional</quote> Clients</title>

  <sect2 xml:id="generate.bootstrap.script">
   <title>Generating a Bootstrap Script</title>
   <para> This section goes over generating a template bootstrap script which will be copied and
    modified for use with <quote>traditional</quote> clients. </para>
   <warning>
    <title>Python3 and SLES 15</title>
    <para>SLES 15 uses Python 3 as the default python language version. Due to this change your Older
     bootstrap scripts(based on python 2) must be re-created for all SLES 15 systems. Attempting to
     register SLES 15 systems with SUSE Manager using Python 2 versions of the bootstrap script will
     fail.</para>
   </warning>
   <para> Traditional clients register with &susemgr; via a bootstrap script executed on the client
    which deploys all necessary packages to it. The bootstrap script contains parameters which
    assigns a client system to its base channel. Two of these important parameters are: </para>
   <itemizedlist>
    <listitem>
     <para> Activation Keys </para>
    </listitem>
    <listitem>
     <para> GNU Privacy Guard (GPG) Keys </para>
    </listitem>
   </itemizedlist>
   <note>
    <title>Using <option>--traditional</option></title>
    <para> As of &susemgr; 3.1 the <option>--traditional</option> option must be used if creating a
     bootstrap script from the command line via the <command>mgr-bootstrap</command> command for
     traditional clients. Bootstrap scripts are now by default used for Salt minions. </para>
   </note>
   <note>
    <!-- FIXME: checkit! -->
    <title>Bootstrap Scripting Best Practices</title>
    <para> It is possible to use various methods to register clients for use with &susemgr; in mass
     using bootstrap. Using batch scripts for mass registration of both VM and Bare Metal machines
     is a possibility. Some of these methods will be covered in the <citetitle>Best Practices
      Guide</citetitle> and will be added as examples at a later time. </para>
   </note>
   <para> The following procedure will guide you through generating a bootstrap template script. </para>
   <procedure xml:id="create.boot.script">
    <title>Creating a Bootstrap Script</title>
    <step>
     <para> On the &susemgr; &webui;, switch to <menuchoice>
       <guimenu>Admin</guimenu>
       <guimenu>Manager Configuration</guimenu>
       <guimenu>Bootstrap Script</guimenu>
      </menuchoice>. For more information, see <xref linkend="s3-sattools-config-bootstrap"/>.
     </para>
    </step>
    <step>
     <para> Uncheck <guimenu>Bootstrap using Salt</guimenu>. Otherwise leave the default settings
      and click the <guimenu>Update</guimenu> button. </para>
     <informalfigure>
      <mediaobject>
       <imageobject role="html">
        <imagedata fileref="mgr_configuration_bootstrap_trad.png" width="80%"/>
       </imageobject>
       <imageobject role="fo">
        <imagedata fileref="mgr_configuration_bootstrap_trad.png" width="444"/>
       </imageobject>
      </mediaobject>
     </informalfigure>

     <warning>
      <title>Using SSL</title>
      <para> Unchecking <guimenu>Enable SSL</guimenu> in the &webui; or setting
        <literal>USING_SSL</literal> to <literal>0</literal> in the bootstrap script is not
       recommended. If you disable SSL nevertheless you must manage CA certificates yourself to be
       able to run the registration process successfully. </para>
     </warning>
    </step>
    <step>
     <para> A template bootstrap script is generated and stored on the server's file system in the
       <filename>/srv/www/htdocs/pub/bootstrap</filename> directory. </para>
     <screen><prompt># </prompt><command>cd /srv/www/htdocs/pub/bootstrap</command>
<prompt># </prompt><command>ls</command>
bootstrap.sh                  client_config_update.py
client-config-overrides.txt   sm-client-tools.rpm</screen>
     <para> The bootstrap script is also available at
       <filename>https://example.com/pub/bootstrap/bootstrap.sh</filename>. </para>
    </step>
   </procedure>
   <para>
    <xref linkend="modify.bootstrap.script"/> will cover copying and modifying your bootstrap
    template for use with each client. </para>
  </sect2>

  <sect2 xml:id="modify.bootstrap.script">
   <title>Modifying the Bootstrap Script</title>
   <para> In this section you will copy and modify the template bootstrap script you created from
     <xref linkend="generate.bootstrap.script"/>. </para>
   <!-- FIXME -->
   <remark>this section should go towards the end during modification</remark>
   <para> The minimal requirement when modifying a bootstrap script for use with &susemgr; is
    inclusion of an activation key. Depending on your organizations security requirements it is
    strongly recommended to include one or more (GPG) keys (for example, your organization key, and
    package signing keys). For the purposes of this guide you will be registering with the
    activation keys created in the previous section. </para>
   <procedure xml:id="mod.bootstrap.script">
    <title>Modifying the Bootstrap Script</title>
    <step>
     <para> Log in as &rootuser; on the command line on your &susemgr; server. </para>
    </step>
    <step>
     <para> Navigate to the bootstrap directory with: </para>
     <screen><prompt># </prompt><command>cd /srv/www/htdocs/pub/bootstrap/</command></screen>
    </step>
    <step>
     <para> Create and rename two copies of the template bootstrap script for use with each of your
      clients. </para>
     <screen><prompt># </prompt><command>cp bootstrap.sh bootstrap-sles11-sp4.sh</command>
<prompt># </prompt><command>cp bootstrap.sh bootstrap-sles12-sp3.sh</command></screen>
    </step>
    <step>
     <para> Open <filename>sles12-sp3.sh</filename> for modification. Scroll down and modify both
      lines marked in green. You must comment out <literal>exit 1</literal> with a hash mark
       (<literal>#</literal>) to activate the script and then enter the name of the key for this
      script in the <literal>ACTIVATION_KEYS=</literal> field as follows: </para>
     <screen>echo "Enable this script: comment (with #'s) this block (or, at least just"
echo "the exit below)"
echo
#exit 1

# can be edited, but probably correct (unless created during initial install):
# NOTE: ACTIVATION_KEYS *must* be used to bootstrap a client machine.
ACTIVATION_KEYS=1-sles12-sp3
ORG_GPG_KEY=</screen>
    </step>
    <step>
     <para> When you have finished your modifications save the file and repeat this procedure for
      the second bootstrap script. Then proceed to <xref linkend="connect.first.client"/>. </para>
    </step>
   </procedure>
   <note>
    <title>Finding Your Keys</title>
    <para> To find key names you have created: In the &webui;, click <menuchoice>
      <guimenu>Home</guimenu>
      <guimenu>Overview</guimenu>
      <guimenu>Manage Activation keys</guimenu>
      <guimenu>Key Field</guimenu>
     </menuchoice>. All keys created for channels are listed here. You must enter the full name of
     the key you wish to use in the bootstrap script exactly as presented in the key field. </para>
   </note>
  </sect2>

  <sect2 xml:id="connect.first.client">
   <title>Connecting Your First Client</title>
   <para> This section covers connecting your clients to &susemgr; with the modified bootstrap
    script. </para>
   <procedure xml:id="run.bootstrap.script">
    <title>Running the Bootstrap Script</title>
    <step>
     <para> On your &susemgr; Server as &rootuser; navigate to the following directory: </para>
     <screen><prompt># </prompt><command>cd /srv/www/htdocs/pub/bootstrap/</command></screen>
    </step>
    <step>
     <para> Run the following command to execute the bootstrap script on the client: </para>
     <screen><prompt># </prompt><command>cat <replaceable>MODIFIED-SCRIPT.SH</replaceable> \
  | ssh root@example.com /bin/bash</command>
</screen>
    </step>
    <step>
     <para> The script will execute and proceed to download the required dependencies located in the
      repositories directory you created earlier. Once the script has finished running, log in to
      the &webui; and click <menuchoice>
       <guimenu>Systems</guimenu>
       <guimenu>Overview</guimenu>
      </menuchoice> to see your new client listed. </para>
    </step>
   </procedure>
   <para> This concludes the bootstrap section of this guide. <xref
     linkend="preparing.and.registering.clients.salt"/> will go over registering Salt minions for
    use with &susemgr; 3. </para>
  </sect2>
 </sect1>
 <sect1 xml:id="preparing.and.registering.clients.salt">
  <title>Registering Salt Clients</title>

  <para> There are currently three methods for registering Salt
  minions:</para>
  <itemizedlist>
   <listitem>
    <para>
     The following section describes the first method and uses a
     bootstrap repository.
    </para>
   </listitem>
   <listitem>
    <para>
     The second method is to create a bootstrap script with the
     <command>mgr-bootstrap</command> commandline tool or using the
     &webui;.  Make sure that the <guimenu>Bootstrap using
     Salt</guimenu> option is properly checked.  Then bootstrapping Salt
     minions with a bootstrap script is performed in the same manner as
     bootstrapping traditional clients&mdash;for more information, see
     <xref linkend="registering.clients.traditional"/>.
    </para>
   </listitem>
   <listitem>
    <para>
     The third method is performed from the &susemgr; &webui;; find this
     method located in <xref
     linkend="ref.webui.systems.bootstrapping"/>. </para>
   </listitem>
  </itemizedlist>
  
  <important>
   <title>Deprecation Warning</title>
   <para> The <command>mgr-bootstrap --salt</command> option will be deprecated as of SUSE Manager
    3.1. To bootstrap a Salt minion call <command>mgr-bootstrap</command> from the command line as
    you would for a traditional system. </para>
  </important>

  <para> The following section assumes you have created a SUSE Manager tools repository. You can
   review creating a tools repository in <xref linkend="create.tools.repository"/>. </para>

  <warning>
   <title>Ensure the Salt Master is Reachable During Bootstrap</title>
   <para> The Salt master and its proxy should always be reachable via both IP address and the FQDN.
    In the following rare scenario: </para>
   <itemizedlist>
    <listitem>
     <para> The Salt master (SUSE Manager) is in some DNS. </para>
    </listitem>
    <listitem>
     <para> Your Minions are in a different subnet bound to an alternate DNS and the Salt master
      record is absent. </para>
    </listitem>
    <listitem>
     <para> The Salt master cannot know that the minion is not utilizing the same DNS record. The
      the Salt master nevertheless sends the FQDN of itself to the minion expecting it to join.
     </para>
    </listitem>
    <listitem>
     <para> The minion looks for a different DNS, one where the master record does not exist
      therefore bootstrap fails. </para>
    </listitem>
   </itemizedlist>
  </warning>

  <para> Once you have fully synced a base channel from the &webui; for clients to obtain software
   sources from, for example: <literal>SLES12-SP3-Pool_for_x86_64</literal> perform the following
   procedure to register a Salt minion. </para>

  <procedure>
   <title>Registering Salt Minions</title>
   <step>
    <para> On your minion as &rootuser; enter the following command: </para>
    <screen><prompt># </prompt>zypper ar http://<replaceable>FQDN.SUSE.Manager.com</replaceable>/pub/repositories/sle/12/3/bootstrap/ \
   sles12-sp3</screen>
    <note>
     <para> Do not use <literal>HTTPS</literal>. Use <literal>HTTP</literal> instead to avoid
      errors. </para>
    </note>
   </step>
   <step>
    <para> After adding the repository containing the necessary Salt packages execute: </para>
    <screen><prompt># </prompt>zypper in salt-minion</screen>
   </step>
   <step>
    <para> Modify the minion configuration file to point to the fully qualified domain name
      (<replaceable>FQDN</replaceable>) of the &susemgr; server (master): </para>
    <screen><prompt># </prompt>vi /etc/salt/minion</screen>
    <para> Find and change the line: </para>
    <screen>master: salt</screen>
    <para> to: </para>
    <screen>master: <replaceable>FQDN.SUSE.Manager.com</replaceable></screen>
   </step>
   <step>
    <para> Restart the Salt minion with: </para>
    <screen><prompt># </prompt>systemctl restart salt-minion</screen>
    <para> or on non-systemd OS: </para>
    <screen><prompt># </prompt>rcsalt-minion restart</screen>
   </step>
  </procedure>

  <para> Your newly registered minion should now show up within the &webui; under <menuchoice>
    <guimenu>Salt</guimenu>
    <guimenu>Onboarding</guimenu>
   </menuchoice>. Accept its key to begin management. </para>
 </sect1>
</chapter>
