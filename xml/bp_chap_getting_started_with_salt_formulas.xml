<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook50-profile.xsl"
                 type="text/xml" 
                 title="Profiling step"?>
<!DOCTYPE chapter[
  <!ENTITY % entities SYSTEM "entity-decl.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
    xml:id="best.practice.salt.formulas.and.forms">
 <title>Salt Formulas and &susemgr;</title>
 <para>
  This chapter provides an introduction for using Salt Formulas with
  &susemgr;.  Creation of custom formulas will also be introduced.
 </para>
<!-- Add Images of UI, showing examples to help clarify this chapters goals -->
 <sect1 xml:id="best.practice.salt.formulas.what">
  <title>What are Salt Formulas?</title>

  <para>
   Formulas are collections of Salt States that have been pre-written by other
   Salt users and contain generic parameter fields. Formulas allow for reliable
   reproduction of a specific configuration again and again. Formulas can be
   installed from RPM packages or an external git repository.
  </para>

  <para>
   The following list will help you in making the decision to use a state or
   a formula.
  </para>

  <itemizedlist>
   <title>Formula Tips</title>
   <listitem>
    <para>
     When writing states for trivial tasks, formulas are probably not worth the
     time investment.
    </para>
   </listitem>
   <listitem>
    <para>
     For large, non-trivial configurations use formulas.
    </para>
   </listitem>
   <listitem>
    <para>
     Formulas and States both act as a kind of configuration documentation.
     Once written and stored you will have a snapshot of what your
     infrastructure should look like.
    </para>
   </listitem>
   <listitem>
    <para>
     You can greatly decrease the amount of time required for writing a formula
     by grabbing one of the many pre-written formulas on github. There are
     pre-written formulas for hundreds of configurations. You can find these
     located at
     <link
                        xlink:href="https://github.com/saltstack-formulas"/>.
    </para>
   </listitem>
  </itemizedlist>
 </sect1>
<!-- How to install salt formulas from an RPM package and location of files after installation -->
 <sect1 xml:id="best.practice.salt.formulas.install">
  <title>Installing Salt Formulas via RPM</title>

  <para>
   &suse; releases formulas as RPM packages.
  </para>

  <note>
   <title>Formula Channel Location</title>
   <para>
    Available formulas can be located within the
    <systemitem>SUSE-Manager-Server-&productnumber;-Pool</systemitem> channel.
   </para>
  </note>

  <procedure>
   <title>Installing Salt Formulas from an RPM</title>
   <step>
    <para>
     To search for available formulas, execute the following command on your
     &susemgr; server:
    </para>
<screen>&prompt.root;zypper se formula</screen>
    <para>
     You will be presented with a list of available Salt formulas:
    </para>
<screen>S | Name              | Summary                                                    | Type      
--+-------------------+------------------------------------------------------------+-----------
  | locale-formula    | Locale Salt Formula for SUSE Manager                       | package   
  | locale-formula    | Locale Salt Formula for SUSE Manager                       | srcpackage</screen>
   </step>
   <step>
    <para>
     For more information (metadata) about a specific formula run from the
     command line:
    </para>
<screen>&prompt.root;zypper info locale-formula</screen>
<screen>Information for package locale-formula:
-----------------------------------------
Repository: SUSE-Manager-Server-&productnumber;-Pool
Name:  locale-formula
Version:  0.2-1.1
Arch: noarch
Vendor:  SUSE LLC &lt;https://www.suse.com/>
Support Level: Level 3
Status: not installed
Installed Size: 47.9 KiB
Installed: No
Source package : locale-formula-0.2-1.1.src 
Summary        : Locale Salt Formula for SUSE Manager
Description    : Salt Formula for SUSE Manager. Sets up the locale.</screen>
   </step>
   <step>
    <para>
     To install a formula, as &rootuser; or with <command>sudo</command> run:
    </para>
<screen>&prompt.root;zypper in locale-formula</screen>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="best.practice.salt.formulas.filedir">
  <title>File Structure Overview</title>

  <para>
   RPM-based formulas need to be placed within a specific directory
   structure to ensure proper functionality. A formula always consists
   of two separate directories: The <filename>states</filename>
   directory and the <filename>metadata</filename> directory. Folders in
   these directories need to have an exactly matching name, for example
   <literal>locale</literal>.
  </para>

  <variablelist>
   <varlistentry>
    <term>The Formula State Directory</term>
    <listitem>
     <para>
      The formula states directory contains anything necessary for a
      Salt state to work independently. This includes
      <filename>.sls</filename> files, a <filename>map.jinja</filename>
      file and any other required files. This directory should only be
      modified by RPMs and should not be edited manually. For example,
      the <package>locale-formula</package> states directory is located
      in:
     </para>
<screen>/usr/share/susemanager/formulas/states/locale/</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>The Formula Metadata Directory</term>
    <listitem>
     <para>
      The metadata directory contains a <filename>form.yml</filename>
      file which defines the forms for &susemgr; and an optional
      <filename>metadata.yml</filename> file that can contain additional
      information about a formula. For example, the
      <package>locale-formula</package> metadata directory is located
      in:
     </para>
<screen>/usr/share/susemanager/formulas/metadata/locale/</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Custom Formulas</term>
    <listitem>
     <para>
      Custom formula data or (non-RPM) formulas need to be placed into any
      state directory configured as a Salt file root:
     </para>
     <variablelist>
      <varlistentry>
       <term>State directory</term>
       <listitem>
        <para>
         Custom state formula data need to be placed in:
        </para>
<screen>/srv/salt/custom/</screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Metadata Directory</term>
       <listitem>
        <para>
         Custom metadata (information) need to be placed in:
        </para>
<screen>/srv/formula_metadata/custom/</screen>
       </listitem>
      </varlistentry>
     </variablelist>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   All custom folders located in the following directories needs to contain a
   <filename>form.yml</filename> file. These files are detected as form recipes
   and may be applied to groups and systems from the &webui;:
  </para>

<screen>/srv/salt/formula_metadata/<replaceable>custom-formula-name</replaceable>/form.yml</screen>
 </sect1>
 <sect1 xml:id="best.practice.salt.formulas.pillar">
  <title>Editing Pillar Data in &susemgr;</title>

  <para>
   &susemgr; requires a file called <filename>form.yml</filename>, to
   describe how formula data should look within the &webui;.
   <filename>form.yml</filename> is used by &susemgr; to generate the
   desired form, with values editable by a user.
  </para>

  <para>
   For example, the <filename>form.yml</filename> that is included with
   the <package>locale-formula</package> is placed in:
  </para>

<screen>/usr/share/susemanager/formulas/metadata/locale/form.yml</screen>

  <para>
   See part of the following <package>locale-formula</package> example:
  </para>

<screen># This file is part of locale-formula.
#
# Foobar is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Foobar is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of 
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Foobar.  If not, see &lt;http://www.gnu.org/licenses/>.

timezone:
  $type: group

  name:
    $type: select
    $values: ["CET",
              "CST6CDT",
              "EET",
              "EST",
              "EST5EDT",
              "GMT",
              "GMT+0",
              "GMT-0",
              "GMT0",
              "Greenwich",
              "HST",
              "MET",
              "MST",
              "MST7MDT",
              "NZ",
              "NZ-CHAT",
              "Navajo",
              "PST8PDT",
              "UCT",
              "UTC",
              "Universal",
              "W-SU",
              "WET",
              "Zulu",
              "Etc/GMT+1",
              "Etc/GMT+2",
              "Etc/GMT+3",
              "Etc/GMT+4",
              "Etc/GMT+5",
              "Etc/GMT+6",
              "Etc/GMT+7",
              "Etc/GMT+8",
              "Etc/GMT+9",
              "Etc/GMT+10",
              "Etc/GMT+11",
              "Etc/GMT+12",
              "Etc/GMT-1",
              "Etc/GMT-2",
              "Etc/GMT-3",
              "Etc/GMT-4",
              "Etc/GMT-5",
              "Etc/GMT-6",
              "Etc/GMT-7",
              "Etc/GMT-8",
              "Etc/GMT-9",
              "Etc/GMT-10",
              "Etc/GMT-11",
              "Etc/GMT-12",
              "Etc/GMT-13",
              "Etc/GMT-14",
              "Etc/GMT",
              "Etc/GMT+0",
              "Etc/GMT-0",
              "Etc/GMT0",
              "Etc/Greenwich",
              "Etc/UCT",
              "Etc/UTC",
              "Etc/Universal",
              "Etc/Zulu"
              ]
    $default: CET

  hardware_clock_set_to_utc:
    $type: boolean
    $default: True
...</screen>

  <para>
   <filename>form.yml</filename> contains additional information that describes
   how the form for a pillar should look for &susemgr;. This information is
   contained in attributes that always start with a <literal>$</literal> sign.
  </para>

  <important>
   <title>Ignored Values</title>
   <para>
    All values that start with a <literal>$</literal> sign are annotations used
    to display the UI that users interact with. These annotations are not part
    of pillar data itself and are handled as metadata.
   </para>
  </important>

  <para>
   The following are valid attributes.
  </para>

  <variablelist>
   <varlistentry>
    <term>$type</term>
    <listitem>
     <para>
      The most important attribute is the <literal>$type</literal>
      attribute. It defines the type of the pillar value and the
      form-field that is generated. The following represent the
      supported types:
     </para>
     <itemizedlist>
      <listitem>
       <para>
        <literal>text</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>password</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>number</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>url</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>email</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>date</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>time</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>datetime</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>boolean</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>color</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>select</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>group</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>edit-group</literal>
       </para>
      </listitem>
      <listitem>
       <para>
       <literal>namespace</literal>
       </para>
      </listitem>
      <listitem>
       <para>
        <literal>hidden-group</literal> (obsolete, renamed to <literal>namespace</literal>)
       </para>
      </listitem>
     </itemizedlist>
     <note>
      <title>Text Attribute</title>
      <para>
       The text attribute is the default and does not need to be specified
       explicitly.
      </para>
     </note>
     <para>
      Many of these values are self-explanatory: <literal>text</literal> will
      generate a simple text field, <literal>password</literal> a password
      field and the <literal>color</literal> type will generate a color picker.
     </para>
     <para>
      The <literal>group</literal>, <literal>edit-group</literal>, and
      <literal>namespace</literal> (formerly
      <literal>hidden-group</literal>) types do not generate an editable
      field and are used to structure form and pillar data. The
      difference between <literal>group</literal> and
      <literal>namespace</literal> is <literal>group</literal> generates
      a visible border with a heading, and <literal>namespace</literal>
      shows nothing visually (and is only used to structure pillar
      data).  The difference between <literal>group</literal> and
      <literal>edit-group</literal> is <literal>edit-group</literal>
      allows to structure and restrict editable fields in a more
      flexible way. For example, <literal>edit-group</literal> supports
      the <literal>$minItems</literal> and <literal>$maxItems</literal>
      attributes, and thus it simplifies complex and repeatable input
      structures.  For an <literal>edit-group</literal> example, see
      <xref linkend="salt.formulas.ex.edit-group"/>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>$default</term>
    <listitem>
     <para>
      <literal>$default</literal> allows you to specify a default value
      that is displayed and used, if no other value is entered.  In an
      <literal>edit-group</literal> it allows to create inital members
      of the group and populate them with specified data.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>$label</term>
    <listitem>
     <para>
      <literal>$label</literal> allows you to specify the name of a
      value that is shown in the form. If this value is not set, the
      pillar name is used and capitalized without underscores and
      dashes.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>$help and $placeholder</term>
    <listitem>
     <para>
      The <literal>$help</literal> and <literal>$placeholder</literal>
      attributes are used to give a user a better understanding of what
      the value should be. <literal>$help</literal> defines the message
      a user sees when hovering over a field and
      <literal>$placeholder</literal> displays a gray placeholder text
      in the field. <literal>$placeholder</literal> may only be used
      with text fields like text, password, email or date. It does not
      make sense to add a placeholder if you also use
      <literal>$default</literal> as this will hide the placeholder.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>$minItems and $maxItems</term>
    <listitem>
     <para>
      In an <literal>edit-group</literal>,
     <literal>$minItems</literal> and <literal>$maxItems</literal> allow
     you to specify the lowest and highest number the group can occur.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>$itemName</term>
    <listitem>
     <para>
      In an <literal>edit-group</literal>, <literal>$itemName</literal>
      allows to define a template for the name to be used for the members
      of the group.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>$prototype</term>
    <listitem>
     <para>
      In an <literal>edit-group</literal>, <literal>$prototype</literal>
      allows to define default (or pre-filled) values for newly added
      members in the group.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>$scope</term>
    <listitem>
     <para>
      <literal>$scope</literal> allows you to specify a hierarchy level
      at which a value may be edited. Possible values are
      <literal>system</literal>, <literal>group</literal> and
      <literal>readonly</literal>.
     </para>
     <para>
      The default <literal>$scope: system</literal> allows values to be edited
      at group and system levels. A value can be entered for each system but if
      no value is entered the system will fall back to the group default.
     </para>
     <para>
      If using <literal>$scope: group</literal>, a value may only be edited for
      a group. On the system level you will be able to see the value, but not
      edit it.
     </para>
     <para>
      The <literal>$scope: readonly</literal> option makes a field read-only.
      It can be used to show a user data which should be known, but should not
      be editable. This option only makes sense in combination with the
      $default attribute.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term> $visibleIf</term>
    <listitem>
     <para>
      <literal>$visibleIf</literal> allows you to show a field or group
      if a simple condition is met. A condition always looks similar to
      the following example:
     </para>
<screen>some_group$another_group$my_checkbox == true</screen>
     <para>
      The left part of the above statement is the path to another value, and
      groups are separated by <literal>$</literal> signs. The middle section of
      the command should be either <literal>==</literal> for a value to be
      equal or <literal>!=</literal> for values that should be not equal. The
      last field in the statement can be any value which a field should have or
      not have.
     </para>
     <para>
      The field with this attribute associated with it will now be shown only
      when the condition is met. In this example the field will be shown only
      if <literal>my_checkbox</literal> is checked. The ability to use
      conditional statements is not limited to check boxes. It may also be used
      to check values of select-fields, text-fields etc.
     </para>
     <para>
      A check box should be structured like the following example:
     </para>
<screen>some_group:
  $type: group

  another_group:
    $type: group

      my_checkbox:
        $type: boolean</screen>
     <para>
      By using multiple groups with the attribute, you can allow a user to
      select an option and show a completely different form, dependant upon the
      selected value.
     </para>
     <note>
      <title>Hidden Values</title>
      <para>
       Values from hidden fields may be merged into the pillar data and sent to
       the minion. A formula must check the condition again and use the
       appropriate data. For example:
      </para>
<screen>show_option:
  $type: checkbox
some_text:
  $visibleIf: show_option == true</screen>
<screen>{% if pillar.show_option %}
do_something:
  with: {{ pillar.some_text }}
{% endif %}</screen>
     </note>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>$values</term>
    <listitem>
     <para>
      <literal>$values</literal> can only be used together with
      <literal>$type</literal>: select to specify the different options
      in the select-field. <literal>$values</literal> must be a list of
      possible values to select. For example:
     </para>
<screen>select_something:
  $type: select
  $values: [“option1”, “option2”]</screen>
     <para>
      Or alternatively:
     </para>
<screen>select_something:
  $type: select
  $values:
    - option1
    - option2</screen>
    </listitem>
   </varlistentry>
  </variablelist>

  <sect2 xml:id="salt.formulas.ex.edit-group">
   <title>Simple <literal>edit-group</literal> Example</title>
   <example xml:id="ex.salt.formula.edit-group">
    <title>Defining Hard Disk Partitions with
    <literal>edit-group</literal></title>
    <screen>partitions:
  $name: "Hard Disk Partitions"
  $type: "edit-group"
  $minItems: 1
  $maxItems: 4
  $itemName: "Partition ${name}"
  $prototype:
    name:
      $default: "New partition"
    mountpoint:
      $default: "/var"
    size:
      $type: "number"
      $name: "Size in GB"
  $default:
    - name: "Boot"
      mountpoint: "/boot"
    - name: "Root"
      mountpoint: "/"
      size: 5000</screen>
   </example>

   <para>
    After clicking <guimenu>Add</guimenu> for one time you will see
    <xref linkend="fig-formula-custom-harddisk-partitions"/> filled with
    the default values.  The formula itself is called
    <filename>hd-partitions</filename> and will appear as <guimenu>Hd
    Partitions</guimenu> in the &webui;.
   </para>
   <figure xml:id="fig-formula-custom-harddisk-partitions">
    <title><literal>edit-group</literal> Example in the &webui;</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="formula-custom-harddisk-partitions.png"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="formula-custom-harddisk-partitions.png"/>
     </imageobject>
    </mediaobject>
   </figure>

   <para>
    To remove definition of a partition click the minus symbol in the
    title line of an inner group.  When form fields are properly filled
    confirm with clicking <guimenu>Save Formula</guimenu> in the upper
    right corner of the formula.
   </para>
  </sect2>
 </sect1>
 <!-- ============================================================== -->
 <sect1 xml:id="best.practice.salt.formulas.writing">
  <title>Writing Salt Formulas</title>

  <para>
   Salt formulas are pre-written Salt states, which may be configured
   with pillar data. You can parametrize state files using Jinja. Jinja
   allows you to access pillar data by using the following syntax. (This
   syntax works best when your uncertain a pillar value exists as it
   will throw an error):
  </para>

<screen>pillar.some.value</screen>

  <para>
   When you are sure a pillar exists may also use the following syntax:
  </para>

<screen>salt['pillar.get']('some:value', 'default value')</screen>

  <para>
   You may also replace the <literal>pillar</literal> value with
   <literal>grains</literal> (for example,
   <literal>grains.some.value</literal>) allowing access to grains.
  </para>

  <para>
   Using data this way allows you to make a formula configurable. The following
   code snippet will install a package specified in the pillar
   <literal>package_name</literal>. For example:
  </para>

<screen>install_a_package:
  pkg.installed:
    - name: {{ pillar.package_name }}</screen>

  <para>
   You may also use more complex constructs such as <literal>if/else</literal>
   and <literal>for-loops</literal> To provide greater functionality. For
   Example:
  </para>

<screen>{% if pillar.installSomething %}
something:
  pkg.installed
{% else %}
anotherPackage:
  pkg.installed
{% endif %}</screen>

  <para>
   Another example:
  </para>

<screen>{% for service in pillar.services %}
start_{{ service }}:
  service.running:
    - name: {{ service }}
{% endfor %}</screen>

  <para>
   Jinja also provides other helpful functions. For example, you can iterate
   over a dictionary:
  </para>

<screen>{% for key, value in some_dictionary.items() %}
do_something_with_{{ key }}: {{ value }}
{% endfor %}</screen>

  <para>
   You may want to have Salt manage your files (for example,
   configuration files for a program), and you can change these with
   pillar data. For example, the following snippet shows how you can
   manage a file using Salt:
  </para>

<screen>/etc/my_program/my_program.conf:
  file.managed:
    - source: salt://my_state/files/my_program.conf
    - template: jinja</screen>

  <para>
   Salt will copy the file
   <filename><replaceable>salt-file_roots</replaceable>/my_state/files/my_program.conf</filename>
   on the salt master to
   <filename>/etc/my_program/my_program.conf</filename> on the minion
   and template it with Jinja. This allows you to use Jinja in the file,
   exactly like shown above for states:
  </para>

<screen>some_config_option = {{ pillar.config_option_a }}</screen>
 </sect1>
 <sect1 xml:id="best.practice.salt.formulas.data">
  <title>Separating Data</title>

  <para>
   It is often a good idea to separate data from a state to increase its
   flexibility and add re-usability value. This is often done by writing values
   into a separate file named <filename>map.jinja</filename>. This file should
   be placed within the same directory as your state files.
  </para>

  <para>
   The following example will set <literal>data</literal> to a dictionary with
   different values, depending on which system the state runs on. It will also
   merge data with the pillar using the <literal>some.pillar.data</literal>
   value so you can access <literal>some.pillar.data.value</literal> by just
   using <literal>data.value</literal>.
  </para>

  <para>
   You can also choose to override defined values from pillars (for
   example, by overriding <literal>some.pillar.data.package</literal> in
   the example).
  </para>

<screen>{% set data = salt[‘grains.filter_by’]({
    ‘Suse’: {
        ‘package’: ‘packageA’,
        ‘service’: ‘serviceA’
    },
    ‘RedHat’: {
        ‘package’: ‘package_a’,
        ‘service’: ‘service_a’
    }
}, merge=salt[‘pillar.get’](‘some:pillar:data’)) %}</screen>

  <para>
   After creating a map file like the above example, you can easily maintain
   compatibility with multiple system types while accessing "deep" pillar data
   in a simpler way. Now you can import and use <literal>data</literal> in any
   file. For example:
  </para>

<screen>{% from “some_folder/map.jinja” import data with context %}

install_package_a:
  pkg.installed:
    - name: {{ data.package }}</screen>

  <para>
   You can also define multiple variables by copying the <literal>{% set ...
   %}</literal> statement with different values and then merge it with other
   pillars. For example:
  </para>

<screen>{% set server = salt[‘grains.filter_by’]({
    ‘Suse’: {
        ‘package’: ‘my-server-pkg’
    }
}, merge=salt[‘pillar.get’](‘myFormula:server’)) %}
{% set client = salt[‘grains.filter_by’]({
    ‘Suse’: {
        ‘package’: ‘my-client-pkg’
    }
}, merge=salt[‘pillar.get’](‘myFormula:client’)) %}</screen>

  <para>
   To import multiple variables, separate them with a comma. For Example:
  </para>

<screen>{% from “map.jinja” import server, client with context %}</screen>

  <para>
   Formulas utilized with &susemgr; should follow formula conventions listed
   in the official
   documentation: <link
                xlink:href="https://docs.saltstack.com/en/latest/topics/development/conventions/formulas.html"
            />
  </para>
 </sect1>
 <sect1 xml:id="best.practice.salt.formulas.pillardata">
  <title>&susemgr; Generated Pillar Data</title>

  <para>
   When pillar data is generated (for example, after applying the
   highstate) the following external pillar script generates pillar data
   for packages, group ids, etc. and includes all pillar data for a
   system:
  </para>

<screen>/usr/share/susemanager/modules/pillar/suma_minion.py</screen>

  <para>
   The process is executed as follows:
  </para>

  <procedure>
   <step>
    <para>
     The <literal>suma_minion.py</literal> script starts and finds all
     formulas for a system (by checking the
     <literal>group_formulas.json</literal> and
     <literal>server_formulas.json</literal> files).
    </para>
   </step>
   <step>
    <para>
     <literal>suma_minion.py</literal> loads the values for each formula (groups and from the
     system) and merges them with the highstate (default: if no values are
     found, a group overrides a system if $scope: group etc.).
    </para>
   </step>
   <step>
    <para>
     <literal>suma_minion.py</literal> also includes a list of formulas
     applied to the system in a pillar named formulas. This structure
     makes it possible to include states.  The top file (in this case
     specifically generated by the <literal>mgr_master_tops.py</literal>
     script) includes a state called formulas for each system. This
     includes the <literal>formulas.sls</literal> file located in:
    </para>
<screen>/usr/share/susemanager/formulas/states/</screen>
    <para>
     The content looks similar to the following:
    </para>
<screen>include: {{ pillar["formulas"] }}</screen>
    <para>
     This pillar includes all formulas, that are specified in pillar data
     generated from the external pillar script.
    </para>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="best.practice.salt.formulas.req">
  <title>Formula Requirements</title>

  <para>
   Formulas should be designed/created directly after a &susemgr;
   installation, but if you encounter any issues check the following:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     The external pillar script (<literal>suma_minion.py</literal>) must
     include formula data.
    </para>
   </listitem>
   <listitem>
    <para>
     Data is saved to <filename>/srv/susemanager/formula_data</filename> and
     the <filename>pillar</filename> and <filename>group_pillar</filename>
     sub-directories. These should be automatically generated by the server.
    </para>
   </listitem>
   <listitem>
    <para>
     Formulas must be included for every minion listed in the top file.
     Currently this process is initiated by the
     <filename>mgr_master_tops.py</filename> script which includes the
     formulas.sls file located in:
    </para>
<screen>/usr/share/susemanager/formulas/states/</screen>
    <para>
     This directory must be a salt file root. File roots are configured on the
     salt-master (&susemgr;) located in:
    </para>
<screen>/etc/salt/master.d/susemanager.conf</screen>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="best.practice.salt.formulas.using">
  <title>Using Salt Formulas with &susemgr;</title>

  <para>
   The following procedure provides an overview on using Salt Formulas with
   &susemgr;.
  </para>

  <procedure>
   <step>
    <para>
     Official formulas may be installed as RPMs. If you have written
     your own formulas, place the states within
     <filename>/srv/salt/<replaceable>your-formula-name</replaceable>/</filename>
     and the metadata (<filename>form.yml</filename> and
     <filename>metadata.yml</filename>) in
     <filename>/srv/formula_metadata/<replaceable>your-formula-name</replaceable>/</filename>.
     After installing your formulas they will appear in
     <menuchoice><guimenu>Salt</guimenu> <guimenu>Formula
     Catalog</guimenu></menuchoice>.
    </para>
   </step>
   <step>
    <para>
     To begin using a formula, apply it to a group or system. Apply a
     formula to a group or system by selecting the
     <guimenu>Formulas</guimenu> tab of a system's details page or
     system group. From the <guimenu>Formulas</guimenu> page you can
     select any formulas you wish to apply to a group or system. Click
     the <guimenu>Save</guimenu> button to save your changes to the
     database.
    </para>
   </step>
   <step>
    <para>
     After applying one or more formulas to a group or system, additional tabs
     will become available from the top menu, one for each formula selected.
     From these tabs you may configure your formulas.
    </para>
   </step>
   <step>
    <para>
     When you have finished customizing your formula values you will need to
     apply the highstate for them to take effect. Applying the highstate will
     execute the state associated with the formula and configure targeted
     systems. You can use the <guimenu>Apply Highstate</guimenu> button from
     any formulas page of a group.
     <!-- this no longer seems to exist: or systems page or
          alternatively use the Highstate page under any system’s Salt
          tab.
     -->
    </para>
   </step>
   <step>
    <para>
     When a change to any of your values is required or you need to
     re-apply the formula state because of a failure or bug, change
     values located on your formula pages and re-apply the
     highstate. Salt will ensure that only modified values are adjusted
     and restart or reinstall services only when necessary.
    </para>
   </step>
  </procedure>

  <para>
   This conclude your introduction to Salt Formulas. For additional information,
   see
   <link
                xlink:href="https://docs.saltstack.com/en/latest/topics/development/conventions/formulas.html"
            />.
  </para>
 </sect1>
</chapter>
